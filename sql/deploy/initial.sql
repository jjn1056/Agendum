BEGIN;

-- 1. Utility Function to Update 'updated_at' Automatically
CREATE OR REPLACE FUNCTION update_timestamp()
RETURNS TRIGGER AS $$
BEGIN
   NEW.updated_at = NOW();
   RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- 2. Person Table

CREATE TYPE user_status AS ENUM ('pending', 'active', 'inactive', 'archived', 'banned', 'deleted');

CREATE TABLE person (
    person_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email TEXT NOT NULL UNIQUE,
    given_name TEXT,
    family_name TEXT,
    password TEXT,
    status user_status NOT NULL DEFAULT 'pending',
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMPTZ DEFAULT NOW() NOT NULL
);

CREATE INDEX idx_person_id ON person(person_id);

-- Trigger to Automatically Update 'updated_at' for Person
CREATE TRIGGER trigger_update_person_updated_at
BEFORE UPDATE ON person
FOR EACH ROW
EXECUTE FUNCTION update_timestamp();

-- -------------------

CREATE TABLE employment (
  employment_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  label VARCHAR(48) NOT NULL UNIQUE
);

INSERT INTO employment (label) VALUES
('unemployed'),
('full-time'),
('part-time'),
('homemaker');

CREATE TABLE state (
  state_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name TEXT NOT NULL UNIQUE,
  abbreviation TEXT NOT NULL UNIQUE
);

INSERT INTO state (name, abbreviation) VALUES
('Alabama', 'AL'),
('Alaska', 'AK'),
('Arizona', 'AZ'),
('California', 'CA'),
('Colorado', 'CO'),
('Florida', 'FL'),
('Georgia', 'GA'),
('New York', 'NY'),
('Texas', 'TX'),
('Illinois', 'IL');

CREATE INDEX idx_state_abbreviation ON state (abbreviation);
CREATE INDEX idx_state_name ON state (name);

-- -------------------

CREATE TABLE profile (
  person_id INTEGER PRIMARY KEY REFERENCES person(person_id),
  state_id INTEGER NOT NULL,
  employment_id INTEGER NOT NULL,
  address TEXT NOT NULL,
  city TEXT NOT NULL,
  zip TEXT NOT NULL,
  birthday DATE,
  phone_number TEXT,
  created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
  updated_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
  FOREIGN KEY (employment_id) REFERENCES employment(employment_id),
  FOREIGN KEY (state_id) REFERENCES state(state_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE INDEX idx_profile_state_id ON profile (state_id);
CREATE INDEX idx_profile_employment_id ON profile (employment_id);

CREATE TRIGGER trigger_update_profile_updated_at
BEFORE UPDATE ON profile
FOR EACH ROW
EXECUTE FUNCTION update_timestamp();

-- -------------------

-- 3. Task Status Enum Type
CREATE TYPE task_status AS ENUM ('pending', 'in_progress', 'on_hold', 'blocked', 'canceled', 'completed');

-- 4. Tasks Table
CREATE TABLE tasks (
    task_id INT GENERATED BY DEFAULT AS IDENTITY,
    person_id INT NOT NULL REFERENCES person(person_id) ON DELETE CASCADE,
    title VARCHAR(255) NOT NULL,
    description TEXT,
    due_date DATE NOT NULL CHECK (due_date >= CURRENT_DATE),
    priority INT NOT NULL DEFAULT 1 CHECK (priority BETWEEN 1 AND 5),
    status task_status DEFAULT 'pending',
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    PRIMARY KEY (person_id, task_id)
);

-- Indexes for Optimized Queries on Tasks
CREATE INDEX idx_tasks_due_date_priority_status ON tasks (due_date, priority, status);
CREATE INDEX idx_tasks_due_date ON tasks (due_date);
CREATE INDEX idx_tasks_priority ON tasks (priority);
CREATE INDEX idx_tasks_status ON tasks (status);
CREATE INDEX idx_tasks_person_id ON tasks (person_id);

-- Trigger to Automatically Update 'updated_at' for Tasks
CREATE TRIGGER trigger_update_tasks_updated_at
BEFORE UPDATE ON tasks
FOR EACH ROW
EXECUTE FUNCTION update_timestamp();

-- -------------------

-- 5. Comments Table
CREATE TABLE comments (
    comment_id INT GENERATED BY DEFAULT AS IDENTITY,
    person_id INT NOT NULL,
    task_id INT NOT NULL,
    content TEXT NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    PRIMARY KEY (person_id, task_id, comment_id),
    FOREIGN KEY (person_id, task_id) REFERENCES tasks(person_id, task_id) ON DELETE CASCADE
);

CREATE INDEX idx_comments_person_task_comment ON comments (person_id, task_id, comment_id);

-- Trigger to Update Task's 'updated_at' After Comment Insert
CREATE OR REPLACE FUNCTION update_tasks_timestamp_on_comments_insert()
RETURNS TRIGGER AS $$
BEGIN
    UPDATE tasks SET updated_at = NOW()
    WHERE person_id = NEW.person_id AND task_id = NEW.task_id;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_update_tasks_on_comments_insert
AFTER INSERT ON comments
FOR EACH ROW
EXECUTE FUNCTION update_tasks_timestamp_on_comments_insert();

-- -------------------

-- 6. Labels Table (Globally Unique Labels)
CREATE TABLE labels (
    label_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(100) NOT NULL UNIQUE,
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL
);

-- -------------------

-- 7. Task-Labels Many-to-Many Relationship
CREATE TABLE task_labels (
    person_id INT NOT NULL,
    task_id INT NOT NULL,
    label_id INT NOT NULL,
    PRIMARY KEY (person_id, task_id, label_id),
    FOREIGN KEY (person_id, task_id) REFERENCES tasks(person_id, task_id) ON DELETE CASCADE,
    FOREIGN KEY (label_id) REFERENCES labels(label_id) ON DELETE CASCADE
);

CREATE INDEX idx_task_labels_person_task ON task_labels (person_id, task_id);
CREATE INDEX idx_task_labels_label ON task_labels (label_id);

-- Triggers to Update Task's 'updated_at' After Task-Label Insert/Delete
CREATE OR REPLACE FUNCTION update_tasks_timestamp_on_task_labels_insert()
RETURNS TRIGGER AS $$
BEGIN
    UPDATE tasks SET updated_at = NOW()
    WHERE person_id = NEW.person_id AND task_id = NEW.task_id;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_update_tasks_on_task_labels_insert
AFTER INSERT ON task_labels
FOR EACH ROW
EXECUTE FUNCTION update_tasks_timestamp_on_task_labels_insert();

CREATE OR REPLACE FUNCTION update_tasks_timestamp_on_task_labels_delete()
RETURNS TRIGGER AS $$
BEGIN
    UPDATE tasks SET updated_at = NOW()
    WHERE person_id = OLD.person_id AND task_id = OLD.task_id;
    RETURN OLD;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_update_tasks_on_task_labels_delete
AFTER DELETE ON task_labels
FOR EACH ROW
EXECUTE FUNCTION update_tasks_timestamp_on_task_labels_delete();

-- Insert Default Labels
INSERT INTO labels (name)
VALUES
('work'),
('personal'),
('health'),
('follow_up'),
('planning'),
('meeting'),
('errand'),
('research'),
('shopping'),
('travel'),
('financial'),
('learning'),
('creative'),
('family');

COMMIT;


