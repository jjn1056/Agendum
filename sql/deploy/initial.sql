BEGIN;

-- 1. Tasks table
CREATE TYPE task_status AS ENUM ('pending', 'in_progress', 'on_hold', 'blocked', 'canceled', 'completed');

CREATE TABLE tasks (
    task_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    description TEXT,
    due_date DATE NOT NULL,
    priority INT DEFAULT 1 CHECK (priority BETWEEN 1 AND 5), -- Priority constrained to 1-5
    status task_status DEFAULT 'pending', -- Enum for status
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Create indexes for optimized sorting tasks
CREATE INDEX idx_tasks_due_date_priority_status ON tasks (due_date, priority, status);
CREATE INDEX idx_tasks_due_date ON tasks (due_date);
CREATE INDEX idx_tasks_priority ON tasks (priority);
CREATE INDEX idx_tasks_status ON tasks (status);

-- Create a function to update 'updated_at'
CREATE OR REPLACE FUNCTION update_timestamp()
RETURNS TRIGGER AS $$
BEGIN
   NEW.updated_at = NOW();
   RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create trigger for 'tasks' table
CREATE TRIGGER trigger_update_tasks_updated_at
BEFORE UPDATE ON tasks
FOR EACH ROW
EXECUTE PROCEDURE update_timestamp();

-- Function to enforce due_date check only on INSERT
CREATE OR REPLACE FUNCTION check_due_date_on_insert() RETURNS TRIGGER AS $$
BEGIN
    IF NEW.due_date < CURRENT_DATE THEN
        RAISE EXCEPTION 'due_date must be in the future';
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger to call the function before insert
CREATE TRIGGER enforce_due_date_on_insert
BEFORE INSERT ON tasks
FOR EACH ROW
EXECUTE FUNCTION check_due_date_on_insert();

-- 2. Comments table (Optional)
CREATE TABLE comments (
    comment_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    task_id INT NOT NULL REFERENCES tasks(task_id) ON DELETE CASCADE,
    content TEXT NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW()
);
CREATE INDEX idx_comments_task_id ON comments (task_id);

-- After inserting a comment, update the parent task’s updated_at
CREATE OR REPLACE FUNCTION update_tasks_timestamp_on_comments_insert()
RETURNS TRIGGER AS $$
BEGIN
    UPDATE tasks SET updated_at = NOW() WHERE task_id = NEW.task_id;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_update_tasks_on_comments_insert
AFTER INSERT ON comments
FOR EACH ROW
EXECUTE FUNCTION update_tasks_timestamp_on_comments_insert();

-- 3. Labels table (Optional)
CREATE TABLE labels (
    label_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(100) NOT NULL
);
ALTER TABLE labels ADD CONSTRAINT unique_label_name UNIQUE (name);
CREATE INDEX idx_labels_name ON labels (name);

-- 4. Task-Labels Many-to-Many relationship (Optional)
CREATE TABLE task_labels (
    task_id INT NOT NULL REFERENCES tasks(task_id) ON DELETE CASCADE,
    label_id INT NOT NULL REFERENCES labels(label_id) ON DELETE CASCADE,
    PRIMARY KEY (task_id, label_id)
);
CREATE INDEX idx_task_labels_task_id ON task_labels (task_id);
CREATE INDEX idx_task_labels_label_id ON task_labels (label_id);

-- After inserting a task_label, update the parent task’s updated_at
CREATE OR REPLACE FUNCTION update_tasks_timestamp_on_task_labels_insert()
RETURNS TRIGGER AS $$
BEGIN
    UPDATE tasks SET updated_at = NOW() WHERE task_id = NEW.task_id;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_update_tasks_on_task_labels_insert
AFTER INSERT ON task_labels
FOR EACH ROW
EXECUTE FUNCTION update_tasks_timestamp_on_task_labels_insert();

-- After deleting a task_label, update the parent task’s updated_at
CREATE OR REPLACE FUNCTION update_tasks_timestamp_on_task_labels_delete()
RETURNS TRIGGER AS $$
BEGIN
    UPDATE tasks SET updated_at = NOW() WHERE task_id = OLD.task_id;
    RETURN OLD;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_update_tasks_on_task_labels_delete
AFTER DELETE ON task_labels
FOR EACH ROW
EXECUTE FUNCTION update_tasks_timestamp_on_task_labels_delete();

-- Some starting labels
INSERT INTO labels (name)
VALUES
('work'),
('personal'),
('health'),
('follow_up'),
('planning'),
('meeting'),
('errand'),
('research'),
('shopping'),
('travel'),
('financial'),
('learning'),
('creative'),
('family');

COMMIT;

/*  ERD Diagram

    +-----------------+           +-------------------+
    |      tasks      |           |     comments      |
    +-----------------+           +-------------------+
    | *task_id* (PK)  |<-----|    | *comment_id* (PK) |
    | title           |  |   |---+| task_id (FK)      |
    | description     |  |        | content           |
    | due_date        |  |        | created_at        |
    | priority        |  |        +-------------------+
    | status          |  |
    | created_at      |  |
    | updated_at      |  |
    +-----------------+  |
                         |
                         |
    +-----------------+  |         +------------------+
    |   task_labels   |  |         |     labels       |
    +-----------------+  |         +------------------+
    | *task_id* (FK)  |<-|  |----+ | *label_id* (PK)  |
    | *label_id* (FK) |<----|      | name (UNIQUE)    |
    +-----------------+            +------------------+
 
*/